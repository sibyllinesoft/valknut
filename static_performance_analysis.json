{
  "analysis_metadata": {
    "total_components_analyzed": 10,
    "total_lines_of_code": 3869,
    "analysis_timestamp": 1757263312.0559747
  },
  "component_breakdown": {
    "pipeline": {
      "name": "pipeline",
      "loc": 457,
      "complexity_score": 64.1,
      "io_operations": 0,
      "cpu_intensive_patterns": 19,
      "native_dependencies": [
        "networkx"
      ],
      "rust_port_score": 0.8,
      "estimated_time_percentage": 5.732766133193399
    },
    "complexity_detector": {
      "name": "complexity_detector",
      "loc": 258,
      "complexity_score": 27.8,
      "io_operations": 0,
      "cpu_intensive_patterns": 25,
      "native_dependencies": [],
      "rust_port_score": 1.0,
      "estimated_time_percentage": 5.6145439891466555
    },
    "graph_detector": {
      "name": "graph_detector",
      "loc": 263,
      "complexity_score": 31.9,
      "io_operations": 0,
      "cpu_intensive_patterns": 7,
      "native_dependencies": [
        "networkx"
      ],
      "rust_port_score": 0.8999999999999999,
      "estimated_time_percentage": 4.925583455929364
    },
    "echo_bridge": {
      "name": "echo_bridge",
      "loc": 284,
      "complexity_score": 47.6,
      "io_operations": 1,
      "cpu_intensive_patterns": 13,
      "native_dependencies": [],
      "rust_port_score": 0.5,
      "estimated_time_percentage": 1.0582183294696355
    },
    "refactoring_analyzer": {
      "name": "refactoring_analyzer",
      "loc": 1117,
      "complexity_score": 78.7,
      "io_operations": 0,
      "cpu_intensive_patterns": 38,
      "native_dependencies": [],
      "rust_port_score": 1.0,
      "estimated_time_percentage": 41.288503558934686
    },
    "python_adapter": {
      "name": "python_adapter",
      "loc": 353,
      "complexity_score": 81.2,
      "io_operations": 1,
      "cpu_intensive_patterns": 32,
      "native_dependencies": [
        "tree_sitter",
        "networkx"
      ],
      "rust_port_score": 1.0,
      "estimated_time_percentage": 28.047278994357544
    },
    "typescript_adapter": {
      "name": "typescript_adapter",
      "loc": 194,
      "complexity_score": 34.3,
      "io_operations": 3,
      "cpu_intensive_patterns": 22,
      "native_dependencies": [
        "tree_sitter",
        "networkx"
      ],
      "rust_port_score": 1.0,
      "estimated_time_percentage": 3.9066733533314864
    },
    "file_discovery": {
      "name": "file_discovery",
      "loc": 316,
      "complexity_score": 52.3,
      "io_operations": 10,
      "cpu_intensive_patterns": 17,
      "native_dependencies": [],
      "rust_port_score": 0.7,
      "estimated_time_percentage": 5.174861725493778
    },
    "feature_extraction": {
      "name": "feature_extraction",
      "loc": 210,
      "complexity_score": 27.5,
      "io_operations": 0,
      "cpu_intensive_patterns": 6,
      "native_dependencies": [],
      "rust_port_score": 0.8999999999999999,
      "estimated_time_percentage": 1.8082645439363074
    },
    "bayesian_normalization": {
      "name": "bayesian_normalization",
      "loc": 417,
      "complexity_score": 49.9,
      "io_operations": 0,
      "cpu_intensive_patterns": 3,
      "native_dependencies": [
        "numpy"
      ],
      "rust_port_score": 1.0,
      "estimated_time_percentage": 2.443305916207134
    }
  },
  "performance_categorization": {
    "io_bound_components": [],
    "cpu_bound_components": [
      "pipeline",
      "complexity_detector",
      "graph_detector",
      "echo_bridge",
      "refactoring_analyzer",
      "python_adapter",
      "typescript_adapter",
      "feature_extraction",
      "bayesian_normalization"
    ],
    "mixed_components": [
      "file_discovery"
    ]
  },
  "rust_porting_analysis": {
    "methodology": "Static analysis based on code patterns and component characteristics",
    "top_candidates": [
      {
        "component": "refactoring_analyzer",
        "rust_benefit_score": 1.0,
        "time_percentage": 41.3,
        "priority_score": 41.29,
        "estimated_speedup_range": "8.0x to 15.0x"
      },
      {
        "component": "python_adapter",
        "rust_benefit_score": 1.0,
        "time_percentage": 28.0,
        "priority_score": 28.05,
        "estimated_speedup_range": "8.0x to 15.0x"
      },
      {
        "component": "complexity_detector",
        "rust_benefit_score": 1.0,
        "time_percentage": 5.6,
        "priority_score": 5.61,
        "estimated_speedup_range": "8.0x to 15.0x"
      },
      {
        "component": "pipeline",
        "rust_benefit_score": 0.8,
        "time_percentage": 5.7,
        "priority_score": 4.59,
        "estimated_speedup_range": "6.8x to 12.6x"
      },
      {
        "component": "graph_detector",
        "rust_benefit_score": 0.9,
        "time_percentage": 4.9,
        "priority_score": 4.43,
        "estimated_speedup_range": "7.4x to 13.8x"
      }
    ],
    "total_addressable_time": 74.95032654243889
  },
  "native_code_usage": {
    "already_optimized": {
      "pipeline": [
        "networkx"
      ],
      "graph_detector": [
        "networkx"
      ],
      "python_adapter": [
        "tree_sitter",
        "networkx"
      ],
      "typescript_adapter": [
        "tree_sitter",
        "networkx"
      ],
      "bayesian_normalization": [
        "numpy"
      ]
    },
    "optimization_headroom": "Significant opportunities in pure Python computational components"
  },
  "recommendations": [
    {
      "priority": "HIGH",
      "type": "Rust Porting",
      "rationale": "Components with high computational load and Rust suitability",
      "components": [
        "refactoring_analyzer",
        "python_adapter"
      ],
      "estimated_benefit": "5-15x speedup for targeted components",
      "implementation_effort": "Medium to High",
      "risk": "Low - can be done incrementally with Python bindings"
    },
    {
      "priority": "MEDIUM",
      "type": "Parsing Optimization",
      "rationale": "Tree-sitter parsing takes significant time but is already optimized C code",
      "components": [
        "python_adapter"
      ],
      "estimated_benefit": "Limited - already using native tree-sitter",
      "alternatives": [
        "Better caching of parse trees",
        "Incremental parsing for large files",
        "Parallel parsing of multiple files"
      ],
      "implementation_effort": "Medium",
      "risk": "Medium - complex caching invalidation"
    },
    {
      "priority": "LOW",
      "type": "Algorithmic Optimization",
      "rationale": "Complex components may have algorithmic improvements available",
      "components": [
        "pipeline",
        "graph_detector",
        "echo_bridge",
        "refactoring_analyzer",
        "python_adapter",
        "typescript_adapter",
        "file_discovery",
        "bayesian_normalization"
      ],
      "estimated_benefit": "Variable - depends on algorithm improvements found",
      "approach": "Profile to identify specific bottlenecks, then optimize",
      "implementation_effort": "High",
      "risk": "Medium - requires careful testing"
    }
  ]
}