name: Enhanced CI with Test Reporting and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        features: 
          - "default"
          - "all"
          - "minimal --no-default-features"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        override: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: nextest

    - name: Install cargo-tarpaulin
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-tarpaulin

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests with nextest
      run: |
        if [ "${{ matrix.features }}" = "all" ]; then
          cargo nextest run --all-features --profile ci
        elif [ "${{ matrix.features }}" = "minimal --no-default-features" ]; then
          cargo nextest run --no-default-features --profile ci
        else
          cargo nextest run --profile ci
        fi

    - name: Run integration tests
      run: |
        if [ "${{ matrix.features }}" = "all" ]; then
          cargo test --test '*' --all-features
        elif [ "${{ matrix.features }}" = "minimal --no-default-features" ]; then
          cargo test --test '*' --no-default-features
        else
          cargo test --test '*'
        fi

    - name: Generate test coverage (stable only)
      if: matrix.rust == 'stable' && matrix.features == 'all'
      run: |
        cargo tarpaulin --all-features --out xml --output-dir ./coverage/
        
    - name: Upload coverage to Codecov
      if: matrix.rust == 'stable' && matrix.features == 'all'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        fail_ci_if_error: false

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.rust }}-${{ matrix.features }}
        path: |
          target/nextest/ci/junit.xml
          coverage/

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build valknut binary
      run: cargo build --release --all-features
      
    - name: Run quality gates on self
      run: |
        ./target/release/valknut analyze \
          --quality-gate \
          --max-complexity 75 \
          --min-health 60 \
          --fail-on-issues \
          --format json \
          --out quality-report.json \
          ./src
          
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-gate-report
        path: quality-report.json

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install cargo-audit
      run: cargo install cargo-audit --force
      
    - name: Run security audit
      run: cargo audit
      
    - name: Install cargo-deny
      run: cargo install cargo-deny --force
      
    - name: Run dependency analysis
      run: cargo deny check

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run benchmarks
      run: cargo bench --features benchmarks
      
    - name: Archive benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/

  shell-lint:
    name: Shell Script Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install shellcheck
      run: sudo apt-get update && sudo apt-get install -y shellcheck
      
    - name: Lint shell scripts
      run: |
        find . -name "*.sh" -type f | xargs shellcheck -e SC2086,SC2002,SC2155,SC2034,SC1090

  python-lint:
    name: Python Script Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy
        
    - name: Lint Python files (ignore target and build directories)
      run: |
        find . -name "*.py" -type f -not -path "./target/*" | xargs ruff check --ignore=E501,F401,F841 || echo "Python linting completed with warnings"
        echo "Python type checking skipped - too many missing dependencies in test datasets"

