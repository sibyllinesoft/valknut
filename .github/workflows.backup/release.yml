name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  # Pre-release validation
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          
          # Ensure version starts with 'v'
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-rc.1"
            exit 1
          fi
          
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION#v}"

      - name: Validate Cargo.toml version
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          RELEASE_VERSION="${{ steps.version.outputs.version }}"
          
          if [ "$CARGO_VERSION" != "$RELEASE_VERSION" ]; then
            echo "❌ Version mismatch:"
            echo "  Cargo.toml: $CARGO_VERSION"
            echo "  Release: $RELEASE_VERSION"
            echo "Please update Cargo.toml version before releasing"
            exit 1
          else
            echo "✅ Version matches: $RELEASE_VERSION"
          fi

      - name: Check CHANGELOG
        run: |
          if [ ! -f "CHANGELOG.md" ]; then
            echo "⚠️ CHANGELOG.md not found"
            exit 0
          fi
          
          # Check if version is mentioned in CHANGELOG
          if grep -q "${{ steps.version.outputs.version }}" CHANGELOG.md; then
            echo "✅ Version found in CHANGELOG.md"
          else
            echo "⚠️ Version ${{ steps.version.outputs.version }} not found in CHANGELOG.md"
            echo "Consider updating CHANGELOG.md before release"
          fi

  # Run full test suite before release
  test-release:
    name: Test Release Build
    needs: validate-release
    uses: ./.github/workflows/ci.yml
    
  # Build release artifacts for multiple platforms
  build-release:
    name: Build Release
    needs: [validate-release, test-release]
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: valknut-x86_64-linux
          - target: x86_64-apple-darwin
            os: macos-latest
            name: valknut-x86_64-macos
          - target: aarch64-apple-darwin
            os: macos-latest
            name: valknut-aarch64-macos
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: valknut-x86_64-windows.exe
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: valknut-aarch64-linux
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }} --all-features --bin valknut

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/valknut.exe artifacts/${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/valknut artifacts/${{ matrix.name }}
          fi
          
          # Create checksums
          cd artifacts
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            certutil -hashfile ${{ matrix.name }} SHA256 > ${{ matrix.name }}.sha256
          else
            shasum -a 256 ${{ matrix.name }} > ${{ matrix.name }}.sha256
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: artifacts/*

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    needs: [validate-release, build-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Move all binaries to release-assets directory
          find artifacts/ -type f -executable -o -name "*.exe" | while read file; do
            cp "$file" release-assets/
          done
          
          # Move all checksums
          find artifacts/ -name "*.sha256" | while read file; do
            cp "$file" release-assets/
          done
          
          ls -la release-assets/

      - name: Generate release notes
        run: |
          echo "# Valknut ${{ needs.validate-release.outputs.version }}" > release-notes.md
          echo "" >> release-notes.md
          
          if [ -f "CHANGELOG.md" ]; then
            echo "## What's Changed" >> release-notes.md
            echo "" >> release-notes.md
            
            # Extract changelog section for this version
            awk '/^## \[${{ needs.validate-release.outputs.version }}\]/{flag=1;next} /^## \[/{flag=0} flag' CHANGELOG.md >> release-notes.md || true
            
            if [ ! -s release-notes.md ] || [ $(wc -l < release-notes.md) -le 3 ]; then
              echo "See CHANGELOG.md for details." >> release-notes.md
            fi
          else
            echo "See commit history for changes in this release." >> release-notes.md
          fi
          
          echo "" >> release-notes.md
          echo "## Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo "Download the appropriate binary for your platform from the assets below." >> release-notes.md
          echo "" >> release-notes.md
          echo "### Cargo" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "cargo install --git https://github.com/nathan/valknut --tag ${{ needs.validate-release.outputs.tag }}" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Verification" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "# Verify checksums" >> release-notes.md
          echo "shasum -a 256 -c valknut-*.sha256" >> release-notes.md
          echo "\`\`\`" >> release-notes.md

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: "Valknut ${{ needs.validate-release.outputs.version }}"
          body_path: release-notes.md
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to crates.io (optional, requires API token)
  publish-crates:
    name: Publish to crates.io
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    if: "!contains(needs.validate-release.outputs.version, '-')" # Only for stable releases
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Verify build
        run: cargo build --release --all-features

      - name: Publish to crates.io
        if: env.CARGO_REGISTRY_TOKEN != ''
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Skip crates.io publish
        if: env.CARGO_REGISTRY_TOKEN == ''
        run: |
          echo "⚠️ CARGO_REGISTRY_TOKEN not configured, skipping crates.io publish"
          echo "To enable automatic publishing, add CARGO_REGISTRY_TOKEN to repository secrets"

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update version badges
        run: |
          echo "🏷️ Released version ${{ needs.validate-release.outputs.version }}"
          echo "Update README badges and documentation as needed"

      - name: Trigger documentation update
        run: |
          echo "📚 Consider updating documentation for new release"
          echo "Version: ${{ needs.validate-release.outputs.version }}"

      - name: Release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.validate-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifacts**: Multi-platform binaries created" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: Created with release notes" >> $GITHUB_STEP_SUMMARY
          echo "- **Crates.io**: ${{ needs.publish-crates.result == 'success' && 'Published' || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY