# Enhanced Valknut Configuration with Refined Clone Detection
# This configuration eliminates noise from micro-idioms and boilerplate patterns

analysis:
  enable_scoring: true
  enable_graph_analysis: true
  enable_lsh_analysis: true  # Enable for semantic clone detection
  enable_refactoring_analysis: true
  enable_structure_analysis: true
  enable_names_analysis: false  # Simplified pattern analysis only
  confidence_threshold: 0.85
  max_files: 0  # No limit for comprehensive analysis
  exclude_patterns:
    - "*/node_modules/*"
    - "*/venv/*" 
    - "*/target/*"
    - "*/__pycache__/*"
    - "*.min.js"
    - "*/build/*"
    - "*/dist/*"
  include_patterns:
    - "**/*"

# Enhanced duplicate detection configuration
dedupe:
  # Scope filtering - focus on production code
  include:
    - "src/**"
  exclude:
    - "benches/**"
    - "examples/**" 
    - "datasets/**"
    - "**/generated/**"
    - "**/*.pb.rs"
    - "**/tests/**"
    - "**/*_test.rs"
    - "**/*_test.py"
    - "**/*.spec.js"
    - "**/*.test.js"
    
  # Fragment analysis thresholds
  min_function_tokens: 40      # Minimum tokens in a function to consider
  min_ast_nodes: 35           # Minimum AST nodes to consider
  min_match_tokens: 24        # Minimum matching tokens for duplicate
  min_match_coverage: 0.40    # Minimum coverage ratio (40%)
  shingle_k: 9                # K-shingles for tokenization
  require_distinct_blocks: 2  # Need at least 2 distinct code blocks
  
  # Multi-dimensional similarity weights
  weights:
    ast: 0.35   # AST structure similarity
    pdg: 0.45   # Program dependence graph similarity  
    emb: 0.20   # Embedding similarity
    
  # Advanced filtering settings
  io_mismatch_penalty: 0.25   # Penalty for I/O signature differences
  threshold_s: 0.82           # Final similarity threshold
  
  # Boilerplate pattern detection (regex patterns)
  stop_phrases:
    # Python decorators
    - "^\\s*@staticmethod\\b"
    - "^\\s*@classmethod\\b"  
    - "^\\s*@property\\b"
    - "^\\s*@pytest\\.fixture\\b"
    
    # Benchmark/test boilerplate
    - "group\\.bench_with_input\\s*\\("
    - "\\bb\\.iter\\s*\\(\\|\\|"
    - "\\bgroup\\.finish\\s*\\(\\)\\s*;?"
    - "\\bassert_eq!\\s*\\("
    - "\\bassert!\\s*\\("
    - "\\b#\\[test\\]"
    - "\\b#\\[bench\\]"
    
    # Configuration builders  
    - "\\blet\\s+config\\s*=\\s*AnalysisConfig::(new|default)\\s*\\(\\)\\s*;?"
    - "\\blet\\s+\\w+\\s*=\\s*\\w+::default\\s*\\(\\)\\s*;?"
    - "\\bchecks\\.push\\s*\\(\\s*HealthCheck\\s*\\{"
    
    # Common patterns
    - "\\buse\\s+std::"
    - "\\buse\\s+serde::"
    - "\\b#\\[derive\\("
    - "\\b#\\[serde\\("
    
    # Generic error handling
    - "\\.unwrap\\s*\\(\\)\\s*;?"
    - "\\.expect\\s*\\("
    - "\\?\\s*;?$"
    
  # Ranking and output configuration
  rank_by: "saved_tokens"     # Rank by potential token savings
  min_saved_tokens: 100       # Minimum saved tokens to report  
  keep_top_per_file: 3        # Keep top N duplicates per file

# LSH Configuration for similarity detection
lsh:
  num_hashes: 128
  num_bands: 16
  shingle_size: 9             # Match dedupe.shingle_k
  similarity_threshold: 0.82  # Match dedupe.threshold_s
  max_candidates: 100
  use_semantic_similarity: true

# Scoring configuration
scoring:
  normalization_scheme: "z_score_bayesian"
  use_bayesian_fallbacks: true
  confidence_reporting: true
  weights:
    complexity: 1.0
    graph: 0.8
    structure: 0.9
    style: 0.3      # Reduce weight for style-based features
    coverage: 0.7
  statistical_params:
    confidence_level: 0.95
    min_sample_size: 10
    outlier_threshold: 3.0

# Graph analysis configuration  
graph:
  enable_betweenness: true
  enable_closeness: false  # Disable for performance
  enable_cycle_detection: true
  max_exact_size: 10000
  use_approximation: true
  approximation_sample_rate: 0.1

# I/O and reporting
io:
  cache_dir: ".valknut/cache"
  enable_caching: true
  cache_ttl_seconds: 7200  # 2 hours
  report_dir: ".valknut/reports"
  report_format: "html"

# Performance settings
performance:
  max_threads: null  # Use system default
  memory_limit_mb: null
  file_timeout_seconds: 60
  total_timeout_seconds: null
  enable_simd: true
  batch_size: 100

# Language configurations
languages:
  python:
    enabled: true
    file_extensions: [".py", ".pyi"]
    tree_sitter_language: "python"
    max_file_size_mb: 10.0
    complexity_threshold: 10.0
    additional_settings: {}
    
  javascript:
    enabled: true
    file_extensions: [".js", ".mjs", ".jsx"]
    tree_sitter_language: "javascript" 
    max_file_size_mb: 5.0
    complexity_threshold: 10.0
    additional_settings: {}
    
  typescript:
    enabled: true
    file_extensions: [".ts", ".tsx", ".d.ts"]
    tree_sitter_language: "typescript"
    max_file_size_mb: 5.0
    complexity_threshold: 10.0
    additional_settings: {}
    
  rust:
    enabled: true
    file_extensions: [".rs"]
    tree_sitter_language: "rust"
    max_file_size_mb: 15.0
    complexity_threshold: 12.0
    additional_settings: {}

# Structure analysis
structure:
  enable_branch_packs: true
  enable_file_split_packs: true
  top_packs: 10

# Required structure configuration sections
fsdir:
  max_files_per_dir: 25
  max_subdirs_per_dir: 10
  max_dir_loc: 2000
  min_branch_recommendation_gain: 0.15
  min_files_for_split: 5
  target_loc_per_subdir: 1000

fsfile:
  huge_loc: 800
  huge_bytes: 128000
  min_split_loc: 200
  min_entities_per_split: 3

partitioning:
  balance_tolerance: 0.25
  max_clusters: 4
  min_clusters: 2
  naming_fallbacks:
    - core
    - io
    - api
    - util