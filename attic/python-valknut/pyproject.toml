[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
license = { file = "LICENSE" }
name = "valknut"
version = "0.1.0"
description = "Static code analysis library for ranking refactorability"
readme = "README.md"
authors = [
    {name = "Nathan Rice", email = "nathan.alexander.rice@gmail.com"},
]
keywords = ["refactoring", "code-analysis", "static-analysis", "code-quality", "mcp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"

dependencies = [
    "pydantic>=2.5.0",
    "click>=8.1.0",
    "networkx>=3.2",
    "libcst>=1.1.0",
    "astroid>=3.0.0",
    "tree-sitter>=0.20.0",
    "tree-sitter-python>=0.20.0",
    "tree-sitter-typescript>=0.20.0",
    "tree-sitter-javascript>=0.20.0",
    "tree-sitter-rust>=0.20.0",
    "tree-sitter-go>=0.20.0",
    "tree-sitter-bash>=0.20.0",
    "tqdm>=4.65.0",
    "pathspec>=0.11.0",
    "aiofiles>=23.2.0",
    "gitpython>=3.1.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "scikit-learn>=1.3.0",
    "diskcache>=5.6.0",
    "rich>=13.6.0",
    "typer>=0.9.0",
    "psutil>=7.0.0",
    "skald>=0.1.0",
    "PyYAML>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.6.0",
    "ruff>=0.1.0",
    "pre-commit>=3.4.0",
]
semgrep = [
    "semgrep>=1.45.0",
]
echo = [
    "echo-cli>=0.1.0",
]

[project.scripts]
valknut = "valknut.cli:main"

[project.urls]
Homepage = "https://github.com/nathan-rice/valknut"
Repository = "https://github.com/nathan-rice/valknut"
Issues = "https://github.com/nathan-rice/valknut/issues"

[tool.hatch.build.targets.wheel]
packages = ["valknut"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B018", "RUF012"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
strict = true

[[tool.mypy.overrides]]
module = [
    "libcst.*",
    "astroid.*",
    "tree_sitter.*",
    "networkx.*",
    "echo.*",
    "sibylline_echo.*",
    "diskcache.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=valknut",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--strict-markers",
    "--strict-config",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
]
