<!-- Code Analysis Tree -->
<div class="results-section">
    <h2 style="margin-bottom: 0.75rem;">Code Analysis Tree</h2>

    <div id="react-tree-root" class="analysis-tree" style="min-height: 560px;">
        <noscript>
            <div class="valknut-tree-empty">
                <h3>Interactive tree requires JavaScript</h3>
            </div>
        </noscript>
    </div>

    <script id="tree-data" type="application/json">
        {
            "unifiedHierarchy": {{#if unified_hierarchy}}{{{unified_hierarchy}}}{{else}}[]{{/if}},
            "refactoringCandidatesByFile": {{#if refactoring_candidates_by_file}}{{{json refactoring_candidates_by_file}}}{{else}}[]{{/if}},
            "directoryHealthTree": {{#if directory_health_tree}}{{{json directory_health_tree}}}{{else}}null{{/if}},
            "coveragePacks": {{#if coverage_packs}}{{{json coverage_packs}}}{{else}}[]{{/if}}
        }
    </script>

    <script>
        (function () {
            const container = document.getElementById('react-tree-root');
            const dataElement = document.getElementById('tree-data');

            if (!container || !dataElement) {
                console.warn('Valknut: tree container or data payload missing');
                return;
            }

            const parsePayload = () => {
                try {
                    const raw = dataElement.textContent || '{}';
                    return JSON.parse(raw);
                } catch (error) {
                    console.error('Valknut: failed to parse tree payload', error);
                    return null;
                }
            };

            const payload = parsePayload();
            if (!payload) {
                renderFallback('invalid-payload');
                return;
            }

            const getFallbackNodes = () => {
                if (Array.isArray(payload.unifiedHierarchy)) {
                    return payload.unifiedHierarchy;
                }
                if (Array.isArray(payload.refactoringCandidatesByFile)) {
                    return payload.refactoringCandidatesByFile;
                }
                return [];
            };

            function renderFallback(reason) {
                console.warn('Valknut: using static tree fallback', reason);

                const attachFallback = () => {
                    if (typeof window.initializeTree === 'function') {
                        container.innerHTML = '';
                        window.initializeTree('react-tree-root', getFallbackNodes());
                        return;
                    }
                    container.innerHTML = '<div class="valknut-tree-empty"><h3>Unable to load tree view</h3></div>';
                };

                if (typeof window.initializeTree === 'function') {
                    attachFallback();
                    return;
                }

                const script = document.createElement('script');
                script.src = './tree-fallback.js';
                script.async = true;
                script.onload = attachFallback;
                script.onerror = () => {
                    container.innerHTML = '<div class="valknut-tree-empty"><h3>Unable to load tree view</h3></div>';
                };
                document.body.appendChild(script);
            }

            function mountReactTree() {
                try {
                    const React = window.React;
                    const ReactDOM = window.ReactDOM;
                    const TreeComponent = window.CodeAnalysisTree || window.ReactTreeBundle;

                    if (!React || !ReactDOM || !TreeComponent) {
                        throw new Error('React tree bundle not available');
                    }

                    const root = ReactDOM.createRoot(container);
                    root.render(React.createElement(TreeComponent, { data: payload }));
                } catch (error) {
                    console.error('Valknut: failed to mount React tree', error);
                    renderFallback(error.message || 'render-error');
                }
            }

            function ensureBundle() {
                if (window.CodeAnalysisTree || window.ReactTreeBundle) {
                    mountReactTree();
                    return;
                }

                const script = document.createElement('script');
                script.src = './react-tree-bundle.js';
                script.async = true;
                script.onload = mountReactTree;
                script.onerror = () => renderFallback('bundle-load-failed');
                document.body.appendChild(script);
            }

            ensureBundle();
        })();
    </script>
</div>
