<!-- Code Analysis Tree -->
<div class="results-section">
    <h2 style="margin-bottom: 0.75rem;">Code Analysis Tree</h2>

    <div id="react-tree-root" class="analysis-tree" style="min-height: 560px;">
        <noscript>
            <div class="valknut-tree-empty">
                <h3>Interactive tree requires JavaScript</h3>
            </div>
        </noscript>
    </div>

    <script id="tree-data" type="application/json">
        {
            "unifiedHierarchy": {{#if unified_hierarchy}}{{{json unified_hierarchy}}}{{else}}[]{{/if}},
            "refactoringCandidatesByFile": {{#if refactoring_candidates_by_file}}{{{json refactoring_candidates_by_file}}}{{else}}[]{{/if}},
            "directoryHealthTree": {{#if directory_health_tree}}{{{json directory_health_tree}}}{{else}}null{{/if}},
            "coveragePacks": {{#if coverage_packs}}{{{json coverage_packs}}}{{else}}[]{{/if}}
        }
    </script>

    <script>
        (function () {
            const container = document.getElementById('react-tree-root');
            const dataElement = document.getElementById('tree-data');

            if (!container || !dataElement) {
                console.error('Valknut: tree container or data payload missing');
                container.innerHTML = '<div class="valknut-tree-empty"><h3>Tree initialization failed: missing container or data</h3></div>';
                return;
            }

            const parsePayload = () => {
                try {
                    const raw = dataElement.textContent || '{}';
                    return JSON.parse(raw);
                } catch (error) {
                    console.error('Valknut: failed to parse tree payload', error);
                    return null;
                }
            };

            const payload = parsePayload();
            if (!payload) {
                console.error('Valknut: invalid payload data');
                container.innerHTML = '<div class="valknut-tree-empty"><h3>Tree initialization failed: invalid data</h3></div>';
                return;
            }

            function mountReactTree() {
                try {
                    const React = window.React;
                    const ReactDOM = window.ReactDOM;
                    const TreeComponent = window.CodeAnalysisTree || window.ReactTreeBundle;

                    if (!React || !ReactDOM || !TreeComponent) {
                        throw new Error('React tree bundle not available');
                    }

                    console.log('Mounting React Arborist tree with data:', payload);
                    const root = ReactDOM.createRoot(container);
                    root.render(React.createElement(TreeComponent, { data: payload }));
                } catch (error) {
                    console.error('Valknut: failed to mount React tree', error);
                    container.innerHTML = '<div class="valknut-tree-empty"><h3>React tree failed to load</h3><p>' + error.message + '</p></div>';
                }
            }

            function ensureBundle() {
                if (window.CodeAnalysisTree || window.ReactTreeBundle) {
                    mountReactTree();
                    return;
                }

                try {
                    // Inline React tree bundle - executed directly (no template literals to avoid syntax issues)
                    {{inline_js "react-tree-bundle.js"}}
                    mountReactTree();
                } catch (error) {
                    console.error('Failed to execute inlined React tree bundle', error);
                    container.innerHTML = '<div class="valknut-tree-empty"><h3>Failed to load React tree bundle</h3><p>Inlined bundle execution failed: ' + error.message + '</p></div>';
                }
            }

            ensureBundle();
        })();
    </script>
</div>
