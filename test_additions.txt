    #[test]
    fn test_weighted_shingle_analyzer() {
        let mut analyzer = WeightedShingleAnalyzer::new(3);
        
        // Create test entities
        let entity1 = CodeEntity::new(
            "test1",
            "function",
            "func1",
            "/test/file1.py"
        ).with_source_code("def func1():\n    x = 1\n    return x");
        
        let entity2 = CodeEntity::new(
            "test2",
            "function",
            "func2",
            "/test/file2.py"
        ).with_source_code("def func2():\n    y = 2\n    return y");
        
        let entities = vec![&entity1, &entity2];
        
        // Test IDF table construction
        let result = analyzer.build_idf_table(&entities);
        assert!(result.is_ok());
        
        // Test signature computation
        let signatures_result = analyzer.compute_weighted_signatures(&entities);
        assert!(signatures_result.is_ok());
        
        let signatures = signatures_result.unwrap();
        assert_eq!(signatures.len(), 2);
        assert!(signatures.contains_key("test1"));
        assert!(signatures.contains_key("test2"));
    }
    
    #[test]
    fn test_weighted_jaccard_similarity() {
        let analyzer = WeightedShingleAnalyzer::new(2);
        
        let sig1 = WeightedMinHashSignature::new(vec![1.0, 2.0, 3.0, 4.0]);
        let sig2 = WeightedMinHashSignature::new(vec![1.0, 2.0, 5.0, 6.0]);
        let sig3 = WeightedMinHashSignature::new(vec![1.0, 2.0, 3.0, 4.0]);
        
        let sim12 = analyzer.weighted_jaccard_similarity(&sig1, &sig2);
        let sim13 = analyzer.weighted_jaccard_similarity(&sig1, &sig3);
        
        assert_eq!(sim12, 0.5); // 2 out of 4 match
        assert_eq!(sim13, 1.0); // Perfect match
    }
    
    #[test]
    fn test_kgram_generation() {
        let analyzer = WeightedShingleAnalyzer::new(2);
        let code = "def func():\n    return 1";
        let kgrams = analyzer.generate_kgrams(code);
        
        assert!(!kgrams.is_empty());
        // Should contain k-grams like "def func", "func (", etc.
    }
    
    #[test]
    fn test_lsh_extractor_with_denoise() {
        let extractor = LshExtractor::new().with_denoise_enabled(true);
        
        // Should have weighted analyzer enabled
        assert!(extractor.weighted_analyzer.is_some());
        
        let extractor_disabled = LshExtractor::new().with_denoise_enabled(false);
        assert!(extractor_disabled.weighted_analyzer.is_none());
    }